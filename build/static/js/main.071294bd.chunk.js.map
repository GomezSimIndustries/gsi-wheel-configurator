{"version":3,"sources":["button.js","button-select.js","App.js","reportWebVitals.js","index.js"],"names":["$ButtonContainer","styled","div","props","y","x","GSIConfigButton","state","this","src","color","side","alt","Component","ButtonSelect","setButtonColor","number","value","onChange","e","target","$ButtonsContainer","$ConfigContainer","$LeftButtons","$RightButtons","$ButtonSelectGroup","buttons","button1","button2","button3","button4","button5","GSIButtonConfig","buttonColors","monochrome","bind","colors","setState","name","type","check","toString","checked","map","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.071294bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst $ButtonContainer = styled.div`\r\n    position: absolute;\r\n    top: ${props => props.y}px;\r\n    left: ${props => props.x}px;\r\n`;\r\n\r\nclass GSIConfigButton extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n        return (\r\n            <$ButtonContainer x={this.props.x} y={this.props.y}>\r\n                <img src={`./images/buttons/btn-${this.props.color}-${this.props.side}.png`}  alt='button'/>\r\n                <img src={`./images/button-test.svg`}  alt='button'/>\r\n            </$ButtonContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GSIConfigButton;","import React from 'react';\r\n\r\n\r\n\r\nconst ButtonSelect = ({setButtonColor, number, color}) => {\r\n\r\n    return (\r\n        <select value={color} onChange={(e) =>\r\n            {\r\n                setButtonColor(number, e.target.value);\r\n            }\r\n        }>\r\n            <option value=\"Red\">{\"Red\"}</option>\r\n            <option value=\"Green\">{\"Green\"}</option>\r\n            <option value=\"Blue\">{\"Blue\"}</option>\r\n            <option value=\"Black\">{\"Black\"}</option>\r\n            <option value=\"Yellow\">{\"Yellow\"}</option>\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default ButtonSelect;\r\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport GSIConfigButton from '../src/button';\nimport ButtonSelect from '../src/button-select';\n\nconst $ButtonsContainer = styled.div`\n  position: relative;\n`;\nconst $ConfigContainer = styled.div`\n  position: relative;\n`;\n\nconst $LeftButtons = styled.div`\n\n`;\nconst $RightButtons = styled.div`\n\n`;\n\n\nconst $ButtonSelectGroup = styled.div`\n\n`;\n\nconst buttons = {\n  left: {\n    button1: {\n      x: 123,\n      y: 24,\n    },\n    button2: {\n      x: 232,\n      y: 121,\n    },\n    button3: {\n      x: 203,\n      y: 203,\n    },\n    button4: {\n      x: 225,\n      y: 285,\n    },\n    button5: {\n      x: 254,\n      y: 366,\n    },\n  },\n  right: {\n    button1: {\n      x: 772,\n      y: 24,\n    },\n    button2: {\n      x: 663,\n      y: 121,\n    },\n    button3: {\n      x: 691,\n      y: 203,\n    },\n    button4: {\n      x: 668,\n      y: 285,\n    },\n    button5: {\n      x: 637,\n      y: 366,\n    },\n  },\n};\nclass GSIButtonConfig extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonColors: [\n        \"Black\",\n        \"Black\",\n        \"Black\",\n        \"Black\",\n        \"Black\",\n      ],\n      monochrome: false,\n    };\n    this.setButtonColor = this.setButtonColor.bind(this);\n  }\n\n  setButtonColor(number, color) {\n    if (number === 0) {\n      this.setState({ buttonColors: [color, color, color, color, color] });\n      return;\n    }\n    let colors = [...this.state.buttonColors];\n    colors[number - 1] = color;\n    this.setState({ buttonColors: colors });\n  }\n  render() {\n    return (\n      <$ConfigContainer>\n        <label>All one color:</label>\n        <input name=\"monochrome\" type=\"checkbox\" check={this.state.monochrome.toString()} onChange={(e) => {\n          this.setState({ monochrome: e.target.checked });\n          if (e.target.checked) {\n            this.setButtonColor(0, \"Black\");\n          }\n        }} />\n        {this.state.monochrome ?\n          <ButtonSelect setButtonColor={this.setButtonColor} number={0} color={this.state.buttonColors[0]} />\n          :\n          <$ButtonSelectGroup>\n            {this.state.buttonColors.map((color, idx) => (\n              <ButtonSelect key={idx} setButtonColor={this.setButtonColor} number={idx + 1} color={color} />\n            ))}\n          </$ButtonSelectGroup>\n\n        }\n        <$ButtonsContainer>\n          <img src='./images/fpe-trans-buttons-blank.png' alt='button base' />\n          <$LeftButtons>\n            <GSIConfigButton x={buttons.left.button1.x} y={buttons.left.button1.y} color={this.state.buttonColors[0]} side={\"left\"} />\n            <GSIConfigButton x={buttons.left.button2.x} y={buttons.left.button2.y} color={this.state.buttonColors[1]} side={\"left\"} />\n            <GSIConfigButton x={buttons.left.button3.x} y={buttons.left.button3.y} color={this.state.buttonColors[2]} side={\"left\"} />\n            <GSIConfigButton x={buttons.left.button4.x} y={buttons.left.button4.y} color={this.state.buttonColors[3]} side={\"left\"} />\n            <GSIConfigButton x={buttons.left.button5.x} y={buttons.left.button5.y} color={this.state.buttonColors[4]} side={\"left\"} />\n          </$LeftButtons>\n          <$RightButtons>\n            <GSIConfigButton x={buttons.right.button1.x} y={buttons.right.button1.y} color={this.state.buttonColors[0]} side={\"right\"} />\n            <GSIConfigButton x={buttons.right.button2.x} y={buttons.right.button2.y} color={this.state.buttonColors[1]} side={\"right\"} />\n            <GSIConfigButton x={buttons.right.button3.x} y={buttons.right.button3.y} color={this.state.buttonColors[2]} side={\"right\"} />\n            <GSIConfigButton x={buttons.right.button4.x} y={buttons.right.button4.y} color={this.state.buttonColors[3]} side={\"right\"} />\n            <GSIConfigButton x={buttons.right.button5.x} y={buttons.right.button5.y} color={this.state.buttonColors[4]} side={\"right\"} />\n          </$RightButtons>\n        </$ButtonsContainer>\n      </$ConfigContainer >\n    );\n  }\n}\n\nexport default GSIButtonConfig;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}