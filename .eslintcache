[{"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js":"1","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js":"2","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js":"3","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js":"4","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js":"5","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js":"6","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js":"7","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js":"8","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js":"9","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js":"10","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js":"11","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js":"12","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js":"13"},{"size":650,"mtime":1613498573444,"results":"14","hashOfConfig":"15"},{"size":11626,"mtime":1615858326012,"results":"16","hashOfConfig":"15"},{"size":8138,"mtime":1615576397552,"results":"17","hashOfConfig":"15"},{"size":17528,"mtime":1615604075489,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1610157377893,"results":"19","hashOfConfig":"15"},{"size":537,"mtime":1615180344206,"results":"20","hashOfConfig":"15"},{"size":500,"mtime":1610157377893,"results":"21","hashOfConfig":"15"},{"size":27993,"mtime":1615602494893,"results":"22","hashOfConfig":"15"},{"size":5139,"mtime":1615175152492,"results":"23","hashOfConfig":"15"},{"size":9168,"mtime":1615606498111,"results":"24","hashOfConfig":"15"},{"size":5545,"mtime":1615508228045,"results":"25","hashOfConfig":"15"},{"size":1209,"mtime":1614539303823,"results":"26","hashOfConfig":"15"},{"size":1337,"mtime":1612725092479,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"mvgpv9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js",["58"],"import React from 'react';\r\n\r\nimport {\r\n    $ColorSwatchButton,\r\n} from './button/button-editor'\r\n\r\nconst ColorSelect = ({ setColor, index, color, colors, type }) => {\r\n\r\n    return (\r\n        <select value={color} onChange={(e) => {\r\n            setColor(type, index, e.target.value);\r\n        }\r\n        }>\r\n            {colors.map((color, idx) => {\r\n                const colorText = color.charAt(0).toUpperCase() + color.slice(1);\r\n                return (\r\n                    <option key={idx} value={color}>{colorText}</option>\r\n                );\r\n            }\r\n            )}\r\n\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default ColorSelect;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109"],"import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport GSIButton from './button/button';\nimport GSIRotary from './rotary/rotary';\nimport * as html2canvas from 'html2canvas';\nimport { presets } from './config';\nimport Switch from '@material-ui/core/Switch';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { RotaryBase, RotaryDir } from './stickers';\nimport SaveControls from './save';\n\nconst $Container = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  overflow: auto;\n  display: flex;\n  flex-direction: row;\n  /* justify-content: center;\n  align-content: center; */\n  padding: 10px;\n  input[type=text], select {\n    background-color: #181818;\n    color: white;\n    border: 1px solid white;\n    padding: 5px;\n  }\n\n  select {\n    appearance: none;\n    border: none;\n    background: #181818 url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 140 140' width='24' height='24' xmlns='http://www.w3.org/2000/svg'><g><path d='m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z' fill='white'/></g></svg>\") no-repeat;\n    background-position: right 5px top 50%;\n    background-size: 15px 10px;\n    padding-right: 30px;\n  }\n`;\n\nconst $ScrollContainer = styled.div`\n  width: 1338px;\n  height: auto;\n  margin: auto;\n`;\n\nconst $BottomControls = styled.div`\n  width: 100%;\n  height: auto;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  position: relative;\n  z-index: 1;\n  margin-top: -70px;\n`;\n\nconst $SaveButton = styled.button`\n  padding: 10px;\n  background-color: #e61754;\n  border-radius: 15px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  color: white;\n  flex-grow: 0;\n  align-self: center;\n  margin: 10px;\n`;\n\nconst $ButtonsContainer = styled.div`\n  position: relative;\n  background-color: black;\n  \n\n`;\n\nconst $AnimationContainer = styled.div`\n    /* appear - on page load */\n    &.wheel-appear {\n      opacity: 0;\n      transform: scale(0.01);\n  }\n  &.wheel-appear.wheel-appear-active {\n    opacity: 1;\n    transform: scale(1);\n    transition: all 2000ms ease;\n  }\n\n  &.wheel-enter {\n    opacity: 0;\n    position: absolute;\n    transform: scale(0.01);\n  }\n  &.wheel-enter.wheel-enter-active {\n    opacity: 1;\n    transform: scale(1);\n    transition: all 1000ms ease 1000ms;\n  }\n  &.wheel-exit {\n    opacity: 1;\n    transform: scale(1);\n  }\n  &.wheel-exit.wheel-exit-active {\n    opacity: 0;\n    transform: scale(0.01);\n    transition: all 1000ms ease;\n  }\n  &.wheel-exit-done {\n    opacity: 0;\n    display: none;\n  }\n`;\n\nconst $ConfigContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n`;\n\nconst $ConfigLeft = styled.div`\n  width: 200px;\n`;\n\nconst $ConfigRight = styled.div`\n  width: 200px;\n`;\n\nconst $RotaryContainer = styled.div`\n  position: absolute;\n  left: 315px;\n  top: 251px;\n  ${p => p.isGXL && css`\n    top: 191px;\n  `}\n  svg {\n    position: absolute;\n    fill: currentColor;\n  }  \n`;\n\nconst $GSISwitch = styled(Switch)`\n  .MuiSwitch-track {\n    background-color: red;\n  }\n`;\n\nconst $GSISelectLabel = styled(InputLabel)`\n  &.MuiFormLabel-root, &.Mui-focused {\n    background-color: #181818;\n    color: white;\n  }\n`\n\nconst $GSISelect = styled(Select)`\n  color: white !important;\n  background-color: #181818;\n  .MuiSvgIcon-root {\n    color: white;\n  }\n  label {\n    color: white;\n  }\n`\n\nclass GSIButtonConfig extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wheel: 'fpe',\n      lastWheel: 'fpe',\n      activeButtonId: -1,\n      activePreset: 'default',\n      imageSaveName: 'my-gsi-fpe-wheel-image',\n      configSaveName: 'my-gsi-fpe-wheel-config',\n      dashVersion: \"default\",\n      saveIsOpen: false,\n      buttons: JSON.parse(JSON.stringify(presets.default.buttons)),\n      rotaries: JSON.parse(JSON.stringify(presets.default.rotaries))\n    };\n    this.setColor = this.setColor.bind(this);\n    this.setText = this.setText.bind(this);\n    this.setCustomRotaryText = this.setCustomRotaryText.bind(this);\n    this.clearCustomRotaryText = this.clearCustomRotaryText.bind(this);\n    this.setCustomButtonText = this.setCustomButtonText.bind(this);\n    this.clearCustomButtonText = this.clearCustomButtonText.bind(this);\n    this.setCustomButtonIcon = this.setCustomButtonIcon.bind(this);\n    this.clearCustomButtonIcon = this.clearCustomButtonIcon.bind(this);\n    this.setRotaryColor = this.setRotaryColor.bind(this);\n    this.setRotaryText = this.setRotaryText.bind(this);\n    this.setActive = this.setActive.bind(this);\n    this.saveImage = this.saveImage.bind(this);\n    this.saveConfig = this.saveConfig.bind(this);\n    this.uploadConfig = this.uploadConfig.bind(this);\n    this.openSave = this.openSave.bind(this);\n    this.onImageNameChange = this.onImageNameChange.bind(this);\n    this.onConfigNameChange = this.onConfigNameChange.bind(this);\n    this.copyButtonAll = this.copyButtonAll.bind(this);\n    this.copyButtonRow = this.copyButtonRow.bind(this);\n    this.copyRotaryAll = this.copyRotaryAll.bind(this);\n    this.loadPreset = this.loadPreset.bind(this);\n    this.setSaveClosed = this.setSaveClosed.bind(this);\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.activePreset !== 'custom') {\n      if (prevState.buttons !== this.state.buttons || prevState.rotaries !== this.state.rotaries) {\n        this.setState({\n          activePreset: 'custom'\n        });\n      }\n    }\n  }\n\n  setColor(type, index, color) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index][type] = color;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  setStickerColor(index, color) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].stickerColor = color;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  setText(index, text) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].text = text;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  setRotaryText(index, text) {\n    let newRotaries = [...this.state.rotaries];\n    newRotaries[index].text = text;\n    this.setState({\n      rotaries: newRotaries\n    });\n  }\n\n  setCustomRotaryText(index, text) {\n    let newRotaries = [...this.state.rotaries];\n    newRotaries[index].text = 'custom';\n    newRotaries[index].customText = text;\n    this.setState({\n      rotaries: newRotaries\n    });\n  }\n\n  clearCustomRotaryText(index) {\n    let newRotaries = [...this.state.rotaries];\n    newRotaries[index].text = 'custom';\n    newRotaries[index].customText = null;\n    this.setState({\n      rotaries: newRotaries\n    });\n  }\n\n  setCustomButtonText(index, text) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].text = 'custom';\n    newButtons[index].customText = text;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  clearCustomButtonText(index) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].text = 'custom';\n    newButtons[index].customText = null;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  setCustomButtonIcon(index, icon) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].customIcon = icon;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  clearCustomButtonIcon(index) {\n    let newButtons = [...this.state.buttons];\n    newButtons[index].customIcon = null;\n    this.setState({\n      buttons: newButtons\n    });\n  }\n\n  setRotaryColor(type, index, color) {\n    let newRotaries = [...this.state.rotaries];\n    newRotaries[index][type] = color;\n    this.setState({ rotaries: newRotaries });\n  }\n\n  setActive(id) {\n    this.setState({ activeButtonId: id });\n  }\n\n  saveImage() {\n    html2canvas(document.querySelector(\"#gsiConfig\")).then(canvas => {\n      canvas.style.backgroundColor = 'black';\n\n\n      document.body.appendChild(canvas).id = 'gsiPicSave';\n      const picDiv = document.getElementById('gsiPicSave');\n      picDiv.style.display = \"none\";\n      var a = document.createElement('a');\n      a.href = canvas.toDataURL(\"image/jpg\", 0.2).replace(\"image/jpg\", \"image/octet-stream\");\n      a.download = `${this.state.imageSaveName}.jpg`;\n      a.click();\n      document.body.removeChild(document.getElementById('gsiPicSave'));\n    });\n  }\n\n  saveConfig() {\n    const json = JSON.stringify({\n      buttons: this.state.buttons,\n      rotaries: this.state.rotaries\n    });\n    var a = document.createElement('a');\n    a.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(json));\n    a.setAttribute('download', `${this.state.configSaveName}.json`);\n    a.click();\n  }\n\n  uploadConfig() {\n    var files = document.getElementById('uploadConfig').files;\n    if (files.length <= 0) {\n      return false;\n    }\n    const scope = this;\n\n    var fr = new FileReader();\n\n    fr.onload = function (e) {\n      var result = JSON.parse(e.target.result);\n      var formatted = JSON.stringify(result, null, 2);\n      const jsonConfig = JSON.parse(formatted);\n      scope.setState({ buttons: jsonConfig.buttons, rotaries: jsonConfig.rotaries });\n    };\n\n    fr.readAsText(files.item(0));\n  }\n\n  openSave() {\n    this.setState({ saveIsOpen: true });\n  }\n\n  onImageNameChange(val) {\n    this.setState({ imageSaveName: val });\n  }\n\n  onConfigNameChange(val) {\n    this.setState({ configSaveName: val });\n  }\n\n  copyButtonAll(index) {\n    const newBtns = this.state.buttons.map(btn => {\n      return { ...btn, stickerColor: this.state.buttons[index].stickerColor, buttonColor: this.state.buttons[index].buttonColor, textColor: this.state.buttons[index].textColor }\n    });\n    this.setState({ buttons: newBtns });\n  }\n\n  copyButtonRow(index) {\n    let newButtons = [...this.state.buttons];\n    let newIndex = 0;\n    if (index > 4) {\n      newIndex = index - 5;\n    } else {\n      newIndex = index + 5;\n    }\n    newButtons[newIndex].buttonColor = newButtons[index].buttonColor;\n    newButtons[newIndex].stickerColor = newButtons[index].stickerColor;\n    newButtons[newIndex].textColor = newButtons[index].textColor;\n    this.setState({ buttons: newButtons });\n  }\n\n  copyRotaryAll(index) {\n    const rotaryId = this.state.rotaries[0].id;\n    let newRotaries = this.state.rotaries.map(rot => {\n      if (rotaryId === rot.id) {\n        return { ...rot, stickerColor: this.state.rotaries[index].stickerColor, textColor: this.state.rotaries[index].textColor }\n      }\n      return { ...rot, stickerColor: this.state.rotaries[index].stickerColor, rotaryColor: this.state.rotaries[index].rotaryColor, textColor: this.state.rotaries[index].textColor }\n    });\n\n    this.setState({ rotaries: newRotaries });\n  }\n\n  loadPreset(preset) {\n    this.setState({ buttons: JSON.parse(JSON.stringify(presets[preset].buttons)), rotaries: JSON.parse(JSON.stringify(presets[preset].rotaries)) });\n  }\n\n  setSaveClosed() {\n    this.setState({ saveIsOpen: false });\n  }\n\n  render() {\n    const presetKeys = Object.entries(presets);\n    return (\n      <$Container>\n        <$ScrollContainer>\n          <$ConfigContainer onClick={() => this.setState({ activeButtonId: -1, saveIsOpen: false })}>\n            <SaveControls\n              saveConfig={this.saveConfig}\n              saveImage={this.saveImage}\n              imageSaveName={this.state.imageSaveName}\n              configSaveName={this.state.configSaveName}\n              onImageNameChange={this.onImageNameChange}\n              onConfigNameChange={this.onConfigNameChange}\n              uploadConfig={this.uploadConfig}\n              active={this.state.saveIsOpen}\n              saveConfig={this.saveConfig}\n              wheel={this.state.wheel}\n              setSaveClosed={this.setSaveClosed}\n            />\n            <$ConfigLeft>\n            </$ConfigLeft>\n            <TransitionGroup>\n              <CSSTransition\n                // in={this.state.wheel !== this.state.lastWheel}\n                key={this.state.wheel}\n                appear={true}\n                timeout={2000}\n                classNames=\"wheel\"\n              >\n                <$AnimationContainer id=\"gsiConfig\" style={{ padding: '30px', backgroundColor: 'black' }}>\n                  <$ButtonsContainer>\n                    <img src={`./images/${this.state.wheel}-trans-buttons-base.png`} alt='button base' />\n\n                    {this.state.buttons.map((btn, idx) =>\n                      <GSIButton\n                        key={`btn-${idx}-${btn.row}-${btn.side}`}\n                        index={idx}\n                        id={btn.id}\n                        stickerColor={btn.stickerColor}\n                        buttonColor={btn.buttonColor}\n                        textColor={btn.textColor}\n                        customText={btn.customText || ''}\n                        customIcon={btn.customIcon || ''}\n                        text={btn.text}\n                        row={btn.row}\n                        side={btn.side}\n                        setColor={this.setColor}\n                        setText={this.setText}\n                        setCustomText={this.setCustomButtonText}\n                        setCustomIcon={this.setCustomButtonIcon}\n                        clearCustomText={this.clearCustomButtonText}\n                        clearCustomIcon={this.clearCustomButtonIcon}\n                        active={this.state.activeButtonId === btn.id}\n                        setActive={this.setActive}\n                        copyButtonAll={this.copyButtonAll}\n                        copyButtonRow={this.copyButtonRow}\n                      />\n                    )}\n                    <$RotaryContainer isGXL={this.state.wheel === 'gxl'}>\n                      <RotaryBase height=\"194px\" width=\"303px\" style={{ color: \"black\" }} />\n                      <div style={{ position: 'absolute', left: \"95px\", top: \"7px\" }}>\n                        <RotaryDir width=\"115px\" height=\"85px\" style={{ color: this.state.rotaries[2].textColor, fill: 'white !important' }} />\n                      </div>\n                      {this.state.rotaries.map((rot, idx) =>\n                        <GSIRotary\n                          key={`rotary-${idx}`}\n                          index={idx}\n                          id={rot.id}\n                          stickerColor={rot.stickerColor}\n                          text={rot.text}\n                          customText={rot.customText || ''}\n                          textColor={rot.textColor}\n                          rotaryColor={rot.rotaryColor}\n                          active={this.state.activeButtonId === rot.id}\n                          setColor={this.setRotaryColor}\n                          setText={this.setRotaryText}\n                          setCustomText={this.setCustomRotaryText}\n                          clearCustomText={this.clearCustomRotaryText}\n                          setActive={this.setActive}\n                          copyRotaryAll={this.copyRotaryAll}\n                        />\n                      )}\n                    </$RotaryContainer>\n                  </$ButtonsContainer>\n                </$AnimationContainer>\n              </CSSTransition>\n            </TransitionGroup>\n            <$ConfigRight>\n            </$ConfigRight>\n          </$ConfigContainer >\n\n          <$BottomControls>\n            <div style={{ display: 'flex', flexDirection: 'column', textAlign: 'center' }}>\n              <div style={{ margin: '10px' }}>\n                <label onClick={() => this.setState({ lastWheel: this.state.wheel, wheel: 'fpe' })}>FPE</label>\n                <$GSISwitch\n                  checked={this.state.wheel === 'gxl'}\n                  onChange={e => {\n                    console.log('asdf');\n                    const wheelValue = e.target.checked ? 'gxl' : 'fpe';\n                    this.setState({\n                      lastWheel: this.state.wheel,\n                      wheel: wheelValue,\n                      imageSaveName: 'my-gsi-' + wheelValue + '-wheel-image',\n                      configSaveName: 'my-gsi-' + wheelValue + '-wheel-config',\n                    })\n                  }}\n                  name=\"gilad\" />\n                <label onClick={() => this.setState({ lastWheel: this.state.wheel, wheel: 'gxl' })}>GXL</label>\n              </div>\n              <div style={{ margin: '10px' }}>\n                <select\n                  style={{ marginLeft: '5px' }}\n                  value={this.state.activePreset}\n                  onChange={e => {\n                    this.setState({\n                      activePreset: e.target.value\n                    });\n                    this.loadPreset(e.target.value)\n                  }}>\n                  {Object.keys(presets).map((key, idx) =>\n                    <option key={key} value={key}>\n                      {`${presets[key].name}${idx === 0 ? ' Preset' : ''}`}\n                    </option>\n                  )}\n                  <option value={'custom'}>\n                    {'Custom'}\n                  </option>\n                </select>\n              </div>\n              <$SaveButton onClick={e => this.openSave()}>SAVE / LOAD</$SaveButton>\n            </div>\n          </$BottomControls>\n        </$ScrollContainer>\n      </$Container>\n    );\n  }\n}\n\nexport default GSIButtonConfig;","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js",["110","111","112"],"import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport * as html2canvas from 'html2canvas';\nimport {\n    FacebookShareButton,\n    FacebookIcon,\n    TwitterShareButton,\n    TwitterIcon,\n} from \"react-share\";\n\nimport { $CloseButton } from './button/button-editor';\nimport 'react-responsive-combo-box/dist/index.css'\n\nconst $SaveContainer = styled.div`\n    position: absolute;\n    display: ${props => props.active ? 'block' : 'none'};\n    background-color: #050505;\n    padding: 16px;\n    z-index: 10;\n    min-width: 500px;\n    min-height: 100px;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    -webkit-box-shadow: 2px 2px 5px 2px #000000;\n    box-shadow: 2px 2px 5px 2px #000000;\n    text-align: center;\n\n    input {\n        margin: 10px;\n    }\n`;\n\nconst $ImagePreview = styled.div`\n    position: relative;\n    width: auto;\n    height: 150px;\n`;\n\nclass SaveControls extends Component {\n\n    componentDidUpdate() {\n\n        html2canvas(document.querySelector(\"#gsiConfig\")).then(canvas => {\n            const imagePrev = document.getElementById('imagePreview');\n            var image = new Image();\n            image.id = \"pic\";\n            image.style.height = '100%';\n\n            image.src = canvas.toDataURL();\n            imagePrev.innerHTML = image.outerHTML;\n        });\n    }\n\n    render() {\n        const {\n            saveConfig,\n            saveImage,\n            imageSaveName,\n            configSaveName,\n            onImageNameChange,\n            onConfigNameChange,\n            uploadConfig,\n            active,\n            wheel,\n            setSaveClosed\n        } = this.props;\n        return (\n            <div style={{\n                position: 'fixed',\n                width: '100%',\n                height: '100%',\n                display: active ? 'block' : 'none',\n                zIndex: 2\n            }}>\n                <div style={{\n                    position: 'absolute',\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'black',\n                    opacity: '.75',\n                    display: active ? 'block' : 'none',\n                    zIndex: '9'\n                }}></div>\n                <$SaveContainer active={active} onClick={(e) => e.stopPropagation()}>\n                    <p>{'Please save & send both files with your order number to '}<br /><a href=\"mailto:info@gomezsimindustries.com\">{'info@gomezsimindusteries.com'}</a> for proofing and approval</p>\n                    <div>\n                        <label htmlFor=\"imageSaveName\">{\"Image Name:\"}</label>\n                        <input id=\"imageSaveName\" type=\"text\" name=\"imageSaveName\" onChange={e => {\n                            onImageNameChange(e.target.value);\n                        }} value={imageSaveName} />\n                        <button onClick={() => saveImage()}>Save Image</button>\n                    </div>\n                    <div>\n                        <label htmlFor=\"configSaveName\">{\"Config Name:\"}</label>\n                        <input id=\"configSaveName\" type=\"text\" name=\"imageSaveName\" onChange={e => {\n                            onConfigNameChange(e.target.value);\n                        }} value={configSaveName} />\n                        <button onClick={() => saveConfig()}>Save Config</button>\n                    </div>\n                    <div>\n                        <label htmlFor=\"uploadConfig\">Upload Config:</label>\n                        <input\n                            type=\"file\"\n                            id=\"uploadConfig\"\n                            name=\"config\"\n                            accept=\"application/json\"\n                            onChange={e => uploadConfig()} />\n                    </div>\n                    <$CloseButton onClick={e => setSaveClosed()}>x</$CloseButton>\n                    <$ImagePreview id=\"imagePreview\">\n                    </$ImagePreview>\n                    <p>{'Right click and select \"Copy Image\" to easily share to social media!'}</p>\n                    <div>\n                        <TwitterShareButton\n                            title={`Check out my custom @gomezsimracing GSI ${wheel.toUpperCase()} wheel! Go customize your own!`}\n                            hashtags={['MyGSI', 'SimRacing']}\n                            related={['gomezsimracing']}\n                            url={'https://gomezsimindustries.com/wheel-config'}>\n                            <TwitterIcon size={32} round />\n                        </TwitterShareButton>\n                        <FacebookShareButton\n                            quote={`Check out my custom GSI ${wheel.toUpperCase()} wheel! Go customize your own! \\nhttps://gomezsimindustries.com/wheel-config`}\n                            hashtag={'MyGSI'}\n                            url={'https://gomezsimindustries.com/wheel-config'}>\n                            <FacebookIcon size={32} round />\n                        </FacebookShareButton>\n                    </div>\n                </$SaveContainer>\n            </div>\n        );\n    }\n}\n\nexport default SaveControls;\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js",["113","114","115","116","117","118","119"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js",["120","121","122","123"],"import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { rotaryConfig, rotaryTexts } from '../config';\r\nimport * as Stickers from '../stickers';\r\nimport RotaryEditor from './rotary-editor';\r\n\r\nconst $StickerContainer = styled.div`\r\n    position: absolute;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    color: ${p => p.color};\r\n    svg .secondary {\r\n        color: ${p => p.textColor};\r\n    }\r\n`;\r\n\r\nconst $RotaryContainer = styled.div`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    ${p => p.index === 0 && css`\r\n        img {\r\n            height: 42px;\r\n            width: 42px;\r\n        }\r\n    `}\r\n    svg, img {\r\n        position: absolute;\r\n    }\r\n\r\n    \r\n   svg {\r\n        overflow: visible;\r\n    }\r\n\r\n    &:hover {\r\n        svg .main {\r\n            stroke: white;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    }\r\n    \r\n    ${p => p.active && css`\r\n        ${$StickerContainer} > svg .main {\r\n            stroke: white !important;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst $IconContainer = styled.div`\r\n`;\r\n\r\nconst $TextContainer = styled.div`\r\n    color: ${p => p.color};\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    font-size: 11px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    line-height: 11px;\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: ${p => p.funky ? '40px' : '48px'};\r\n    height: 15px;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;    \r\n    @font-face {\r\n        font-family: 'Adrianna';\r\n        src: local('Adrianna Extra bold'), local('Adrianna-Extra-bold'),\r\n            url('./Adrianna-Extrabold.woff2') format('woff2'),\r\n            url('./Adrianna-Extrabold.woff') format('woff'),\r\n            url('./Adrianna-Extrabold.ttf') format('truetype');\r\n        font-weight: 800;\r\n        font-style: normal;\r\n    }\r\n\r\n    font-family: 'Adrianna', Arial, serif;\r\n`;\r\n\r\nclass GSIRotary extends Component {\r\n\r\n    render() {\r\n        const {\r\n            index,\r\n            id,\r\n            rotaryColor,\r\n            stickerColor,\r\n            textColor,\r\n            text,\r\n            customText,\r\n            setText,\r\n            setCustomText,\r\n            clearCustomText,\r\n            active,\r\n            setActive,\r\n            setColor,\r\n            copyRotaryAll\r\n        } = this.props;\r\n        let RotarySticker = Stickers.RotaryRight;\r\n        let direction = rotaryConfig[index].dir;\r\n        if (direction === 'funky') {\r\n            RotarySticker = Stickers.Funky;\r\n        } else {\r\n            direction = direction.charAt(0).toUpperCase() + direction.slice(1);\r\n            RotarySticker = Stickers[`Rotary${direction}`];\r\n        }\r\n        let x = rotaryConfig[index].x;\r\n        let y = rotaryConfig[index].y;\r\n        let image = `./images/buttons/rotary_${rotaryColor.toLowerCase()}.png`;\r\n        if (index === 0) {\r\n            image = `./images/buttons/funky_${rotaryColor.toLowerCase()}.png`;\r\n        }\r\n        let side = 'right';\r\n        if (index === 0 || index === 1 || index === 2 || index === 4) {\r\n            side = 'left';\r\n        }\r\n        return (\r\n            <$RotaryContainer\r\n                x={x}\r\n                y={y}\r\n                index={index}\r\n                color={textColor}\r\n                active={active}\r\n                onClick={(e) => {\r\n                    !active ? setActive(id) : setActive(-1);\r\n                    e.stopPropagation();\r\n                }}\r\n\r\n                title=\"Click to customize rotary\">\r\n                <$StickerContainer\r\n                    x={rotaryConfig[index].sticker.x}\r\n                    y={rotaryConfig[index].sticker.y}\r\n                    color={stickerColor}\r\n                    textColor={textColor}\r\n                >\r\n                    <RotarySticker\r\n                        width={rotaryConfig[index].sticker.width}\r\n                        height={rotaryConfig[index].sticker.height}\r\n                    />\r\n                </$StickerContainer>\r\n                <img src={image} alt='rotary dial' style={{ height: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\", width: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\" }} />\r\n                {index !== 2 && (\r\n                    <$TextContainer\r\n                        x={rotaryConfig[index].text.x}\r\n                        y={rotaryConfig[index].text.y}\r\n                        color={textColor}\r\n                        funky={index === 0}>\r\n                        {customText ? customText : rotaryTexts[text].text}\r\n                    </$TextContainer>\r\n                )}\r\n                <RotaryEditor\r\n                    active={active}\r\n                    id={id}\r\n                    rotaryColor={rotaryColor}\r\n                    stickerColor={stickerColor}\r\n                    textColor={textColor}\r\n                    text={text}\r\n                    setColor={setColor}\r\n                    setText={setText}\r\n                    setCustomText={setCustomText}\r\n                    clearCustomText={clearCustomText}\r\n                    index={index}\r\n                    side={side}\r\n                    top={index === 1 || index === 3}\r\n                    copyRotaryAll={copyRotaryAll}\r\n                    setActive={setActive} />\r\n            </$RotaryContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GSIRotary;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js",[],{"ruleId":"124","severity":1,"message":"125","line":4,"column":5,"nodeType":"126","messageId":"127","endLine":4,"endColumn":23},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":190,"column":13,"nodeType":"131","endLine":194,"endColumn":27},{"ruleId":"129","severity":1,"message":"132","line":195,"column":17,"nodeType":"131","endLine":195,"endColumn":60},{"ruleId":"129","severity":1,"message":"133","line":196,"column":17,"nodeType":"131","endLine":196,"endColumn":34},{"ruleId":"129","severity":1,"message":"134","line":211,"column":25,"nodeType":"131","endLine":211,"endColumn":40},{"ruleId":"129","severity":1,"message":"135","line":212,"column":29,"nodeType":"131","endLine":212,"endColumn":145},{"ruleId":"129","severity":1,"message":"136","line":213,"column":29,"nodeType":"131","endLine":213,"endColumn":40},{"ruleId":"129","severity":1,"message":"137","line":214,"column":29,"nodeType":"131","endLine":216,"endColumn":51},{"ruleId":"129","severity":1,"message":"132","line":226,"column":33,"nodeType":"131","endLine":226,"endColumn":111},{"ruleId":"129","severity":1,"message":"134","line":239,"column":25,"nodeType":"131","endLine":239,"endColumn":40},{"ruleId":"129","severity":1,"message":"135","line":240,"column":29,"nodeType":"131","endLine":240,"endColumn":151},{"ruleId":"129","severity":1,"message":"136","line":241,"column":29,"nodeType":"131","endLine":241,"endColumn":40},{"ruleId":"129","severity":1,"message":"137","line":247,"column":29,"nodeType":"131","endLine":249,"endColumn":51},{"ruleId":"129","severity":1,"message":"132","line":259,"column":33,"nodeType":"131","endLine":259,"endColumn":111},{"ruleId":"129","severity":1,"message":"134","line":265,"column":25,"nodeType":"131","endLine":265,"endColumn":40},{"ruleId":"129","severity":1,"message":"133","line":275,"column":17,"nodeType":"131","endLine":275,"endColumn":34},{"ruleId":"129","severity":1,"message":"138","line":288,"column":21,"nodeType":"131","endLine":294,"endColumn":28},{"ruleId":"124","severity":1,"message":"139","line":38,"column":7,"nodeType":"126","messageId":"127","endLine":38,"endColumn":25},{"ruleId":"124","severity":1,"message":"140","line":101,"column":13,"nodeType":"126","messageId":"127","endLine":101,"endColumn":15},{"ruleId":"129","severity":1,"message":"130","line":104,"column":13,"nodeType":"131","endLine":108,"endColumn":54},{"ruleId":"129","severity":1,"message":"132","line":109,"column":17,"nodeType":"131","endLine":109,"endColumn":60},{"ruleId":"129","severity":1,"message":"133","line":110,"column":17,"nodeType":"131","endLine":110,"endColumn":34},{"ruleId":"129","severity":1,"message":"134","line":123,"column":25,"nodeType":"131","endLine":123,"endColumn":40},{"ruleId":"129","severity":1,"message":"135","line":124,"column":29,"nodeType":"131","endLine":124,"endColumn":145},{"ruleId":"129","severity":1,"message":"136","line":125,"column":29,"nodeType":"131","endLine":125,"endColumn":40},{"ruleId":"129","severity":1,"message":"137","line":126,"column":29,"nodeType":"131","endLine":128,"endColumn":51},{"ruleId":"129","severity":1,"message":"132","line":138,"column":33,"nodeType":"131","endLine":138,"endColumn":111},{"ruleId":"129","severity":1,"message":"134","line":150,"column":25,"nodeType":"131","endLine":150,"endColumn":40},{"ruleId":"129","severity":1,"message":"135","line":151,"column":29,"nodeType":"131","endLine":151,"endColumn":151},{"ruleId":"129","severity":1,"message":"136","line":152,"column":29,"nodeType":"131","endLine":152,"endColumn":40},{"ruleId":"129","severity":1,"message":"137","line":158,"column":29,"nodeType":"131","endLine":160,"endColumn":51},{"ruleId":"129","severity":1,"message":"132","line":168,"column":33,"nodeType":"131","endLine":168,"endColumn":111},{"ruleId":"129","severity":1,"message":"133","line":179,"column":17,"nodeType":"131","endLine":179,"endColumn":34},{"ruleId":"124","severity":1,"message":"141","line":10,"column":8,"nodeType":"126","messageId":"127","endLine":10,"endColumn":16},{"ruleId":"124","severity":1,"message":"142","line":11,"column":8,"nodeType":"126","messageId":"127","endLine":11,"endColumn":22},{"ruleId":"124","severity":1,"message":"143","line":12,"column":8,"nodeType":"126","messageId":"127","endLine":12,"endColumn":19},{"ruleId":"124","severity":1,"message":"144","line":151,"column":7,"nodeType":"126","messageId":"127","endLine":151,"endColumn":22},{"ruleId":"124","severity":1,"message":"145","line":158,"column":7,"nodeType":"126","messageId":"127","endLine":158,"endColumn":17},{"ruleId":"124","severity":1,"message":"146","line":413,"column":11,"nodeType":"126","messageId":"127","endLine":413,"endColumn":21},{"ruleId":"129","severity":1,"message":"147","line":415,"column":7,"nodeType":"131","endLine":415,"endColumn":19},{"ruleId":"129","severity":1,"message":"148","line":416,"column":9,"nodeType":"131","endLine":416,"endColumn":27},{"ruleId":"129","severity":1,"message":"149","line":417,"column":11,"nodeType":"131","endLine":417,"endColumn":102},{"ruleId":"150","severity":1,"message":"151","line":427,"column":15,"nodeType":"152","endLine":427,"endColumn":43},{"ruleId":"129","severity":1,"message":"153","line":431,"column":13,"nodeType":"131","endLine":431,"endColumn":26},{"ruleId":"129","severity":1,"message":"154","line":441,"column":17,"nodeType":"131","endLine":441,"endColumn":107},{"ruleId":"129","severity":1,"message":"155","line":442,"column":19,"nodeType":"131","endLine":442,"endColumn":38},{"ruleId":"129","severity":1,"message":"156","line":470,"column":21,"nodeType":"131","endLine":470,"endColumn":74},{"ruleId":"129","severity":1,"message":"157","line":499,"column":13,"nodeType":"131","endLine":499,"endColumn":27},{"ruleId":"129","severity":1,"message":"158","line":503,"column":11,"nodeType":"131","endLine":503,"endColumn":28},{"ruleId":"129","severity":1,"message":"159","line":507,"column":17,"nodeType":"131","endLine":519,"endColumn":34},{"ruleId":"129","severity":1,"message":"160","line":542,"column":15,"nodeType":"131","endLine":542,"endColumn":59},{"ruleId":"129","severity":1,"message":"161","line":85,"column":17,"nodeType":"131","endLine":85,"endColumn":86},{"ruleId":"129","severity":1,"message":"132","line":110,"column":21,"nodeType":"131","endLine":110,"endColumn":66},{"ruleId":"129","severity":1,"message":"162","line":111,"column":21,"nodeType":"131","endLine":111,"endColumn":54},{"ruleId":"124","severity":1,"message":"163","line":176,"column":13,"nodeType":"126","messageId":"127","endLine":176,"endColumn":23},{"ruleId":"129","severity":1,"message":"164","line":192,"column":13,"nodeType":"131","endLine":202,"endColumn":51},{"ruleId":"129","severity":1,"message":"165","line":203,"column":17,"nodeType":"131","endLine":206,"endColumn":33},{"ruleId":"129","severity":1,"message":"166","line":214,"column":17,"nodeType":"131","endLine":221,"endColumn":76},{"ruleId":"129","severity":1,"message":"167","line":224,"column":29,"nodeType":"131","endLine":224,"endColumn":45},{"ruleId":"129","severity":1,"message":"167","line":238,"column":41,"nodeType":"131","endLine":238,"endColumn":57},{"ruleId":"129","severity":1,"message":"167","line":253,"column":21,"nodeType":"131","endLine":257,"endColumn":131},{"ruleId":"124","severity":1,"message":"168","line":54,"column":7,"nodeType":"126","messageId":"127","endLine":54,"endColumn":21},{"ruleId":"129","severity":1,"message":"156","line":124,"column":13,"nodeType":"131","endLine":135,"endColumn":51},{"ruleId":"129","severity":1,"message":"165","line":136,"column":17,"nodeType":"131","endLine":141,"endColumn":18},{"ruleId":"129","severity":1,"message":"166","line":149,"column":21,"nodeType":"131","endLine":153,"endColumn":45},"no-unused-vars","'$ColorSwatchButton' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react/jsx-pascal-case","Imported JSX component $EditorContainer must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component $CloseButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GroupContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RowContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorSwatchButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $HexValue must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorPickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $IconSelect must be in PascalCase or SCREAMING_SNAKE_CASE","'$ButtonSelectGroup' is assigned a value but never used.","'id' is assigned a value but never used.","'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.","'FormControl' is defined but never used.","'$GSISelectLabel' is assigned a value but never used.","'$GSISelect' is assigned a value but never used.","'presetKeys' is assigned a value but never used.","Imported JSX component $Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ScrollContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigContainer must be in PascalCase or SCREAMING_SNAKE_CASE","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Imported JSX component $ConfigLeft must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $AnimationContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ButtonsContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RotaryContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigRight must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $BottomControls must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GSISwitch must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ImagePreview must be in PascalCase or SCREAMING_SNAKE_CASE","'CustomIcon' is assigned a value but never used.","Imported JSX component $ButtonContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $StickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $TextContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $IconContainer must be in PascalCase or SCREAMING_SNAKE_CASE","'$IconContainer' is assigned a value but never used."]