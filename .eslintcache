[{"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js":"1","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js":"2","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js":"3","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js":"4","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js":"5","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js":"6","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js":"7","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js":"8","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js":"9","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js":"10","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js":"11","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js":"12","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js":"13"},{"size":650,"mtime":1613498573444,"results":"14","hashOfConfig":"15"},{"size":9101,"mtime":1614194138773,"results":"16","hashOfConfig":"15"},{"size":6956,"mtime":1614193518601,"results":"17","hashOfConfig":"15"},{"size":14180,"mtime":1614471378954,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1610157377893,"results":"19","hashOfConfig":"15"},{"size":501,"mtime":1613063436707,"results":"20","hashOfConfig":"15"},{"size":500,"mtime":1610157377893,"results":"21","hashOfConfig":"15"},{"size":23363,"mtime":1613971136698,"results":"22","hashOfConfig":"15"},{"size":5187,"mtime":1614471316126,"results":"23","hashOfConfig":"15"},{"size":8280,"mtime":1614194176749,"results":"24","hashOfConfig":"15"},{"size":5313,"mtime":1614194250888,"results":"25","hashOfConfig":"15"},{"size":713,"mtime":1611504770437,"results":"26","hashOfConfig":"15"},{"size":1337,"mtime":1612725092479,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"mvgpv9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js",["57"],"import React from 'react';\r\n\r\nimport {\r\n    $ColorSwatchButton,\r\n} from './button/button-editor'\r\n\r\nconst ColorSelect = ({ setColor, index, color, colors, type }) => {\r\n\r\n    return (\r\n        <select value={color} onChange={(e) => {\r\n            setColor(type, index, e.target.value);\r\n        }\r\n        }>\r\n            {colors.map((color, idx) => {\r\n                const colorText = color.charAt(0).toUpperCase() + color.slice(1);\r\n                return (\r\n                    <option key={idx} value={color}>{colorText}</option>\r\n                );\r\n            }\r\n            )}\r\n\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default ColorSelect;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport ColorSelect from '../color-select';\nimport TextSelect from '../text-select';\nimport { funkyColors, rotaryColors, rotaryStickerColors, textColors, rotaryTexts } from '../config';\nimport { SketchPicker } from 'react-color';\nimport {\n    $GroupContainer,\n    $RowContainer,\n    $CloseButton,\n    $ColorSwatchButton,\n    $HexValue,\n    $ColorPickerContainer\n} from '../button/button-editor';\n\nconst $EditorContainer = styled.div`\n    transform: translateY(-50%);\n    position: absolute;\n    cursor: initial;\n    display: ${props => props.active ? 'block' : 'none'};\n    background-color: #050505;\n    padding: 15px;\n    padding-bottom: 3px;\n    z-index: 10;\n    min-width: 100px;\n    font-size: 14px;\n    ${props => props.side === 'left' ? css`\n        right: 18px;\n        left: auto;\n    ` : css`\n        right: auto;\n        left: 60px;\n    `}\n    -webkit-box-shadow: 2px 2px 5px 2px #000000;\n    box-shadow: 2px 2px 5px 2px #000000;\n`;\n\nconst $ButtonSelectGroup = styled.div`\n    padding: 10px;\n    border: 2px solid white;\n    border-radius: 6px;\n\n    &:first-child {\n        border: 2px solid white;\n    }\n    &:last-child {\n        border: 2px solid #c20358;\n    }\n    &:nth-child(2) {\n        border: 2px solid #480048;\n    }\n    &:nth-child(3) {\n        border: 2px solid #f29900;\n    }\n`;\n\nclass RotaryEditor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            pickerOpen: false,\n            pickerElement: ''\n        };\n        this.togglePicker = this.togglePicker.bind(this);\n    }\n\n    togglePicker(e, text) {\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        this.setState({\n            pickerOpen: !this.state.pickerOpen,\n            pickerElement: this.state.picerOpen ? '' : text\n        });\n    }\n\n    componentDidUpdate(oldProps, oldState) {\n        if (oldProps.active && !this.props.active) {\n            if (this.state.pickerOpen)\n                this.setState({ pickerOpen: false, pickerElement: '' });\n        }\n    }\n\n    render() {\n        const {\n            rotaryColor,\n            stickerColor,\n            textColor,\n            text,\n            active,\n            setColor,\n            setText,\n            index,\n            side,\n            copyRotaryAll,\n            setActive\n        } = this.props;\n        return (\n            <$EditorContainer\n                active={active}\n                side={side}\n                onClick={(e) => e.stopPropagation()}>\n                <$CloseButton onClick={e => setActive(-1)}>x</$CloseButton>\n                <$GroupContainer>\n                    <span>Colors</span>\n                    <div>\n                        <span>Knob</span>\n                        <ColorSelect\n                            setColor={setColor}\n                            index={index}\n                            color={rotaryColor}\n                            colors={index === 0 ? funkyColors : rotaryColors}\n                            type={'rotaryColor'} />\n                    </div>\n                    <div>\n                        <span>Text</span>\n                        <$RowContainer>\n                            <$ColorSwatchButton onClick={e => this.togglePicker(e, 'text')} color={textColor} title=\"Open/Close Color Picker\" />\n                            <$HexValue>Value:</$HexValue>\n                            <$ColorPickerContainer\n                                open={this.state.pickerOpen && this.state.pickerElement === 'text'}\n                                id=\"sketchPicker\">\n                                <SketchPicker\n                                    color={textColor}\n                                    disableAlpha={true}\n                                    presetColors={textColors}\n                                    onClick={e => { e.stopPropagation(); }}\n                                    onChange={color => {\n                                        setColor('textColor', index, color.hex);\n                                    }}\n                                    style={{ padding: \"15px\" }} />\n                                <$CloseButton onClick={e => this.setState({ pickerOpen: false })} dark={true}>x</$CloseButton>\n                            </$ColorPickerContainer>\n                            <input type=\"text\"\n                                value={textColor}\n                                style={{ width: '65px', marginLeft: '10px' }}\n                                onChange={e => setColor('textColor', index, e.target.value)} />\n                        </$RowContainer>\n                    </div>\n                    <div>\n                        <div>\n                            <span>Sticker</span>\n                        </div>\n                        <$RowContainer>\n                            <$ColorSwatchButton onClick={e => this.togglePicker(e, 'sticker')} color={stickerColor} title=\"Open/Close Color Picker\" />\n                            <$HexValue>Value:\n                        <input type=\"text\"\n                                    value={stickerColor}\n                                    style={{ width: '65px', marginLeft: '10px' }}\n                                    onChange={e => setColor('stickerColor', index, e.target.value)} />\n                            </$HexValue>\n                            <$ColorPickerContainer\n                                open={this.state.pickerOpen && this.state.pickerElement === 'sticker'}\n                                id=\"sketchPicker\">\n                                <SketchPicker\n                                    color={stickerColor}\n                                    disableAlpha={true}\n                                    presetColors={rotaryStickerColors}\n                                    onChange={color => {\n                                        setColor('stickerColor', index, color.hex);\n                                    }} />\n                                <$CloseButton onClick={e => this.setState({ pickerOpen: false })} dark={true}>x</$CloseButton>\n                            </$ColorPickerContainer>\n                        </$RowContainer>\n                    </div>\n                    <div>\n                        <span>Apply Colors To</span>\n                        <button onClick={e => {\n                            copyRotaryAll(index);\n                        }}>All Rotaries</button>\n                    </div>\n                </$GroupContainer>\n                <$GroupContainer>\n                    <span>Function</span>\n                    <TextSelect setText={setText}\n                        value={text}\n                        index={index}\n                        text={text}\n                        texts={rotaryTexts} />\n                </$GroupContainer>\n            </$EditorContainer>\n        );\n    }\n}\n\nexport default RotaryEditor;\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js",["105","106","107"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js",["108","109","110","111","112","113"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js",["114","115","116","117"],"import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { rotaryConfig, rotaryTexts } from '../config';\r\nimport * as Stickers from '../stickers';\r\nimport RotaryEditor from './rotary-editor';\r\n\r\nconst $StickerContainer = styled.div`\r\n    position: absolute;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    color: ${p => p.color};\r\n    svg .secondary {\r\n        color: ${p => p.textColor};\r\n    }\r\n`;\r\n\r\nconst $RotaryContainer = styled.div`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    ${p => p.index === 0 && css`\r\n        img {\r\n            height: 42px;\r\n            width: 42px;\r\n        }\r\n    `}\r\n    svg, img {\r\n        position: absolute;\r\n    }\r\n\r\n    \r\n   svg {\r\n        overflow: visible;\r\n    }\r\n\r\n    &:hover {\r\n        svg .main {\r\n            stroke: white;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    }\r\n    \r\n    ${p => p.active && css`\r\n        ${$StickerContainer} > svg .main {\r\n            stroke: white !important;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst $IconContainer = styled.div`\r\n`;\r\n\r\nconst $TextContainer = styled.div`\r\n    color: ${p => p.color};\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    font-size: 11px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    line-height: 11px;\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: ${p => p.funky ? '40px' : '48px'};\r\n    height: 15px;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;    \r\n    @font-face {\r\n        font-family: 'Adrianna';\r\n        src: local('Adrianna Extra bold'), local('Adrianna-Extra-bold'),\r\n            url('../Adrianna-Extrabold.woff2') format('woff2'),\r\n            url('../Adrianna-Extrabold.woff') format('woff'),\r\n            url('../Adrianna-Extrabold.ttf') format('truetype');\r\n        font-weight: 800;\r\n        font-style: normal;\r\n    }\r\n\r\n    font-family: 'Adrianna', Arial, serif;\r\n`;\r\n\r\nclass GSIRotary extends Component {\r\n\r\n    render() {\r\n        const {\r\n            index,\r\n            id,\r\n            rotaryColor,\r\n            stickerColor,\r\n            textColor,\r\n            text,\r\n            setText,\r\n            active,\r\n            setActive,\r\n            setColor,\r\n            copyRotaryAll\r\n        } = this.props;\r\n        let RotarySticker = Stickers.RotaryRight;\r\n        let direction = rotaryConfig[index].dir;\r\n        if (direction === 'funky') {\r\n            RotarySticker = Stickers.Funky;\r\n        } else {\r\n            direction = direction.charAt(0).toUpperCase() + direction.slice(1);\r\n            RotarySticker = Stickers[`Rotary${direction}`];\r\n        }\r\n        let x = rotaryConfig[index].x;\r\n        let y = rotaryConfig[index].y;\r\n        let image = `./images/buttons/rotary_${rotaryColor.toLowerCase()}.png`;\r\n        if (index === 0) {\r\n            image = `./images/buttons/funky_${rotaryColor.toLowerCase()}.png`;\r\n        }\r\n        let side = 'right';\r\n        if (index === 0 || index === 1 || index === 2 || index === 4) {\r\n            side = 'left';\r\n        }\r\n        return (\r\n            <$RotaryContainer\r\n                x={x}\r\n                y={y}\r\n                index={index}\r\n                color={textColor}\r\n                active={active}\r\n                onClick={(e) => {\r\n                    !active ? setActive(id) : setActive(-1);\r\n                    e.stopPropagation();\r\n                }}\r\n                \r\n                title=\"Click to customize rotary\">\r\n                <$StickerContainer\r\n                    x={rotaryConfig[index].sticker.x}\r\n                    y={rotaryConfig[index].sticker.y}\r\n                    color={stickerColor}\r\n                    textColor={textColor}\r\n                >\r\n                    <RotarySticker\r\n                        width={rotaryConfig[index].sticker.width}\r\n                        height={rotaryConfig[index].sticker.height}\r\n                    />\r\n                </$StickerContainer>\r\n                <img src={image} alt='rotary dial' style={{ height: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\", width: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\" }} />\r\n                {index !== 2 && (\r\n                    <$TextContainer\r\n                        x={rotaryConfig[index].text.x}\r\n                        y={rotaryConfig[index].text.y}\r\n                        color={textColor}\r\n                        funky={index === 0}>\r\n                        {rotaryTexts[text].text}\r\n                    </$TextContainer>\r\n                )}\r\n                <RotaryEditor\r\n                    active={active}\r\n                    id={id}\r\n                    rotaryColor={rotaryColor}\r\n                    stickerColor={stickerColor}\r\n                    textColor={textColor}\r\n                    text={rotaryTexts[text].text}\r\n                    setColor={setColor}\r\n                    setText={setText}\r\n                    index={index}\r\n                    side={side}\r\n                    copyRotaryAll={copyRotaryAll}\r\n                    setActive={setActive} />\r\n            </$RotaryContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GSIRotary;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js",[],{"ruleId":"118","severity":1,"message":"119","line":4,"column":5,"nodeType":"120","messageId":"121","endLine":4,"endColumn":23},{"ruleId":"118","severity":1,"message":"122","line":1,"column":28,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"123","severity":1,"message":"124","line":172,"column":13,"nodeType":"125","endLine":176,"endColumn":27},{"ruleId":"123","severity":1,"message":"126","line":177,"column":17,"nodeType":"125","endLine":177,"endColumn":60},{"ruleId":"123","severity":1,"message":"127","line":178,"column":17,"nodeType":"125","endLine":178,"endColumn":34},{"ruleId":"123","severity":1,"message":"128","line":193,"column":25,"nodeType":"125","endLine":193,"endColumn":40},{"ruleId":"123","severity":1,"message":"129","line":194,"column":29,"nodeType":"125","endLine":194,"endColumn":145},{"ruleId":"123","severity":1,"message":"130","line":195,"column":29,"nodeType":"125","endLine":195,"endColumn":40},{"ruleId":"123","severity":1,"message":"131","line":196,"column":29,"nodeType":"125","endLine":198,"endColumn":51},{"ruleId":"123","severity":1,"message":"126","line":208,"column":33,"nodeType":"125","endLine":208,"endColumn":111},{"ruleId":"123","severity":1,"message":"128","line":221,"column":25,"nodeType":"125","endLine":221,"endColumn":40},{"ruleId":"123","severity":1,"message":"129","line":222,"column":29,"nodeType":"125","endLine":222,"endColumn":151},{"ruleId":"123","severity":1,"message":"130","line":223,"column":29,"nodeType":"125","endLine":223,"endColumn":40},{"ruleId":"123","severity":1,"message":"131","line":229,"column":29,"nodeType":"125","endLine":231,"endColumn":51},{"ruleId":"123","severity":1,"message":"126","line":241,"column":33,"nodeType":"125","endLine":241,"endColumn":111},{"ruleId":"123","severity":1,"message":"128","line":247,"column":25,"nodeType":"125","endLine":247,"endColumn":40},{"ruleId":"123","severity":1,"message":"127","line":257,"column":17,"nodeType":"125","endLine":257,"endColumn":34},{"ruleId":"118","severity":1,"message":"132","line":38,"column":7,"nodeType":"120","messageId":"121","endLine":38,"endColumn":25},{"ruleId":"123","severity":1,"message":"124","line":99,"column":13,"nodeType":"125","endLine":102,"endColumn":54},{"ruleId":"123","severity":1,"message":"126","line":103,"column":17,"nodeType":"125","endLine":103,"endColumn":60},{"ruleId":"123","severity":1,"message":"127","line":104,"column":17,"nodeType":"125","endLine":104,"endColumn":34},{"ruleId":"123","severity":1,"message":"128","line":117,"column":25,"nodeType":"125","endLine":117,"endColumn":40},{"ruleId":"123","severity":1,"message":"129","line":118,"column":29,"nodeType":"125","endLine":118,"endColumn":145},{"ruleId":"123","severity":1,"message":"130","line":119,"column":29,"nodeType":"125","endLine":119,"endColumn":40},{"ruleId":"123","severity":1,"message":"131","line":120,"column":29,"nodeType":"125","endLine":122,"endColumn":51},{"ruleId":"123","severity":1,"message":"126","line":132,"column":33,"nodeType":"125","endLine":132,"endColumn":111},{"ruleId":"123","severity":1,"message":"128","line":144,"column":25,"nodeType":"125","endLine":144,"endColumn":40},{"ruleId":"123","severity":1,"message":"129","line":145,"column":29,"nodeType":"125","endLine":145,"endColumn":151},{"ruleId":"123","severity":1,"message":"130","line":146,"column":29,"nodeType":"125","endLine":146,"endColumn":40},{"ruleId":"123","severity":1,"message":"131","line":152,"column":29,"nodeType":"125","endLine":154,"endColumn":51},{"ruleId":"123","severity":1,"message":"126","line":162,"column":33,"nodeType":"125","endLine":162,"endColumn":111},{"ruleId":"123","severity":1,"message":"127","line":173,"column":17,"nodeType":"125","endLine":173,"endColumn":34},{"ruleId":"118","severity":1,"message":"133","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":16},{"ruleId":"118","severity":1,"message":"134","line":11,"column":8,"nodeType":"120","messageId":"121","endLine":11,"endColumn":22},{"ruleId":"118","severity":1,"message":"135","line":12,"column":8,"nodeType":"120","messageId":"121","endLine":12,"endColumn":19},{"ruleId":"118","severity":1,"message":"136","line":137,"column":7,"nodeType":"120","messageId":"121","endLine":137,"endColumn":22},{"ruleId":"118","severity":1,"message":"137","line":144,"column":7,"nodeType":"120","messageId":"121","endLine":144,"endColumn":17},{"ruleId":"118","severity":1,"message":"138","line":332,"column":11,"nodeType":"120","messageId":"121","endLine":332,"endColumn":21},{"ruleId":"123","severity":1,"message":"139","line":334,"column":7,"nodeType":"125","endLine":334,"endColumn":19},{"ruleId":"123","severity":1,"message":"140","line":335,"column":9,"nodeType":"125","endLine":335,"endColumn":100},{"ruleId":"141","severity":1,"message":"142","line":345,"column":13,"nodeType":"143","endLine":345,"endColumn":41},{"ruleId":"123","severity":1,"message":"144","line":349,"column":11,"nodeType":"125","endLine":349,"endColumn":24},{"ruleId":"123","severity":1,"message":"145","line":359,"column":15,"nodeType":"125","endLine":359,"endColumn":49},{"ruleId":"123","severity":1,"message":"146","line":381,"column":17,"nodeType":"125","endLine":381,"endColumn":70},{"ruleId":"123","severity":1,"message":"147","line":406,"column":11,"nodeType":"125","endLine":406,"endColumn":25},{"ruleId":"123","severity":1,"message":"148","line":410,"column":9,"nodeType":"125","endLine":410,"endColumn":26},{"ruleId":"123","severity":1,"message":"149","line":414,"column":15,"nodeType":"125","endLine":426,"endColumn":32},{"ruleId":"123","severity":1,"message":"150","line":447,"column":13,"nodeType":"125","endLine":447,"endColumn":57},{"ruleId":"123","severity":1,"message":"151","line":86,"column":17,"nodeType":"125","endLine":86,"endColumn":86},{"ruleId":"123","severity":1,"message":"126","line":111,"column":21,"nodeType":"125","endLine":111,"endColumn":66},{"ruleId":"123","severity":1,"message":"152","line":112,"column":21,"nodeType":"125","endLine":112,"endColumn":54},{"ruleId":"123","severity":1,"message":"153","line":173,"column":13,"nodeType":"125","endLine":183,"endColumn":51},{"ruleId":"123","severity":1,"message":"154","line":184,"column":17,"nodeType":"125","endLine":187,"endColumn":33},{"ruleId":"123","severity":1,"message":"155","line":195,"column":17,"nodeType":"125","endLine":202,"endColumn":76},{"ruleId":"123","severity":1,"message":"156","line":205,"column":29,"nodeType":"125","endLine":205,"endColumn":45},{"ruleId":"123","severity":1,"message":"156","line":219,"column":41,"nodeType":"125","endLine":219,"endColumn":57},{"ruleId":"123","severity":1,"message":"156","line":234,"column":21,"nodeType":"125","endLine":238,"endColumn":131},{"ruleId":"118","severity":1,"message":"157","line":54,"column":7,"nodeType":"120","messageId":"121","endLine":54,"endColumn":21},{"ruleId":"123","severity":1,"message":"146","line":121,"column":13,"nodeType":"125","endLine":132,"endColumn":51},{"ruleId":"123","severity":1,"message":"154","line":133,"column":17,"nodeType":"125","endLine":138,"endColumn":18},{"ruleId":"123","severity":1,"message":"155","line":146,"column":21,"nodeType":"125","endLine":150,"endColumn":45},"no-unused-vars","'$ColorSwatchButton' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react/jsx-pascal-case","Imported JSX component $EditorContainer must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component $CloseButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GroupContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RowContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorSwatchButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $HexValue must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorPickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","'$ButtonSelectGroup' is assigned a value but never used.","'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.","'FormControl' is defined but never used.","'$GSISelectLabel' is assigned a value but never used.","'$GSISelect' is assigned a value but never used.","'presetKeys' is assigned a value but never used.","Imported JSX component $Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigContainer must be in PascalCase or SCREAMING_SNAKE_CASE","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Imported JSX component $ConfigLeft must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ButtonsContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RotaryContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigRight must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $BottomControls must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GSISwitch must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ImagePreview must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ButtonContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $StickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $TextContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $IconContainer must be in PascalCase or SCREAMING_SNAKE_CASE","'$IconContainer' is assigned a value but never used."]