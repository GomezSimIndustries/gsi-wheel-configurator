[{"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js":"1","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js":"2","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js":"3","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js":"4","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js":"5","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js":"6","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js":"7","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js":"8","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js":"9","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js":"10","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js":"11","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js":"12","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js":"13"},{"size":650,"mtime":1613498573444,"results":"14","hashOfConfig":"15"},{"size":9101,"mtime":1614194138773,"results":"16","hashOfConfig":"15"},{"size":8138,"mtime":1615561576928,"results":"17","hashOfConfig":"15"},{"size":16062,"mtime":1615508201575,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1610157377893,"results":"19","hashOfConfig":"15"},{"size":537,"mtime":1615180344206,"results":"20","hashOfConfig":"15"},{"size":500,"mtime":1610157377893,"results":"21","hashOfConfig":"15"},{"size":29127,"mtime":1615508007973,"results":"22","hashOfConfig":"15"},{"size":5139,"mtime":1615175152492,"results":"23","hashOfConfig":"15"},{"size":8277,"mtime":1614569236120,"results":"24","hashOfConfig":"15"},{"size":5545,"mtime":1615508228045,"results":"25","hashOfConfig":"15"},{"size":1209,"mtime":1614539303823,"results":"26","hashOfConfig":"15"},{"size":1337,"mtime":1612725092479,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"mvgpv9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\color-select.js",["57"],"import React from 'react';\r\n\r\nimport {\r\n    $ColorSwatchButton,\r\n} from './button/button-editor'\r\n\r\nconst ColorSelect = ({ setColor, index, color, colors, type }) => {\r\n\r\n    return (\r\n        <select value={color} onChange={(e) => {\r\n            setColor(type, index, e.target.value);\r\n        }\r\n        }>\r\n            {colors.map((color, idx) => {\r\n                const colorText = color.charAt(0).toUpperCase() + color.slice(1);\r\n                return (\r\n                    <option key={idx} value={color}>{colorText}</option>\r\n                );\r\n            }\r\n            )}\r\n\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default ColorSelect;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button-editor.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary-editor.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\App.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\reportWebVitals.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\text-select.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\index.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\config.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\save.js",["108","109","110"],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\button\\button.js",["111","112","113","114","115","116"],"import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport * as Stickers from '../stickers';\r\nimport * as Icons from '../icons';\r\nimport { stickerTexts, config } from '../config'\r\nimport ButtonEditor from './button-editor';\r\n\r\nconst $StickerContainer = styled.div`\r\n    color: ${p => p.color};\r\n    top: ${p => p.y}px;\r\n    left: ${p => p.x}px;\r\n    position: absolute;\r\n`;\r\n\r\nconst $ButtonContainer = styled.div`\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: ${props => props.y};\r\n    left: ${props => props.x};\r\n\r\n    img {\r\n        position: absolute;\r\n\r\n        &.sticker {\r\n            height: 75px;\r\n        }\r\n\r\n        &.buttonGuard {\r\n            ${p =>\r\n        p.side === 'right' ?\r\n            css`\r\n                top: -9px;\r\n                left: -10px;\r\n            ` :\r\n            css`\r\n                top: -9px;\r\n                left: -9px;\r\n            `}\r\n        }\r\n    }\r\n\r\n    svg {\r\n        fill: currentColor;\r\n        overflow: visible;\r\n    }\r\n\r\n    &:hover {\r\n        ${$StickerContainer} > svg {\r\n            stroke: white !important;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    }\r\n\r\n    ${p => p.active && css`\r\n        ${$StickerContainer} > svg {\r\n            stroke: white !important;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst $IconContainer = styled.div`\r\n    /* position: absolute; */\r\n    color: ${p => p.color};\r\n    ${p =>\r\n        p.row > 2 ?\r\n            css`\r\n    position: absolute;\r\n            ` :\r\n            css`\r\n    position: relative;\r\n            `}\r\n    ${p =>\r\n        p.row === 2 ?\r\n            css`\r\n    display: inline-block;\r\n            ` :\r\n            css`\r\n    display: block;\r\n            `}\r\n`;\r\n\r\nconst $TextContainer = styled.div`\r\n    position: absolute;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    left: ${p => p.offsetX};\r\n    top: ${p => p.offsetY};\r\n    font-size: 10px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    color: ${p => p.color};\r\n    line-height: 11px;\r\n    width: ${p => p.width};\r\n    height: ${p => p.height};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    ${p => p.row === 2 &&\r\n        css`\r\n            line-height: 14px;\r\n            justify-content: center;\r\n            ${$IconContainer} {\r\n                margin-left: 5px;\r\n            }\r\n    `}\r\n    ${p => p.row === 1 &&\r\n        css`\r\n            flex-direction: column;\r\n            ${p => p.stickerText !== 'pitLimit' &&\r\n                css`\r\n            `\r\n            }\r\n            `}\r\n    \r\n    @font-face {\r\n        font-family: 'Adrianna';\r\n        src: local('Adrianna Extra bold'), local('Adrianna-Extra-bold'),\r\n            url('./Adrianna-Extrabold.woff2') format('woff2'),\r\n            url('./Adrianna-Extrabold.woff') format('woff'),\r\n            url('./Adrianna-Extrabold.ttf') format('truetype');\r\n        font-weight: 800;\r\n        font-style: normal;\r\n    }\r\n\r\n    font-family: 'Adrianna', Arial, serif;\r\n`;\r\n\r\nclass GSIButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            side,\r\n            row,\r\n            buttonColor,\r\n            stickerColor,\r\n            textColor,\r\n            text,\r\n            setColor,\r\n            setText,\r\n            index,\r\n            id,\r\n            active,\r\n            setActive,\r\n            copyButtonAll,\r\n            copyButtonRow\r\n        } = this.props;\r\n        const sideText = side.charAt(0).toUpperCase() + side.slice(1);\r\n        const Sticker = Stickers[`Row${row}${sideText}`];\r\n        const Icon = Icons[stickerTexts[text].icon];\r\n        const height = config[`Row${row}`].stickerHeight;\r\n        const width = config[`Row${row}`].stickerWidth;\r\n        let offsetX;\r\n        let offsetY;\r\n        const buttonX = config[`Row${row}`][`button${sideText}`].x;\r\n        const buttonY = config[`Row${row}`][`button${sideText}`].y;\r\n\r\n        offsetX = config[`Row${row}`][`sticker${sideText}`].x;\r\n        offsetY = config[`Row${row}`][`sticker${sideText}`].y;\r\n\r\n        const textOffsetX = config[`Row${row}`][`text${sideText}`].x;\r\n        const textOffsetY = config[`Row${row}`][`text${sideText}`].y;\r\n\r\n        return (\r\n            <$ButtonContainer\r\n                x={buttonX}\r\n                y={buttonY}\r\n                side={side}\r\n                active={active}\r\n                onClick={(e) => {\r\n                    !active ? setActive(id) : setActive(-1);\r\n                    e.stopPropagation();\r\n                }}\r\n                textColor={textColor}\r\n                title=\"Click to customize button\">\r\n                <$StickerContainer\r\n                    color={stickerColor}\r\n                    x={offsetX}\r\n                    y={offsetY}>\r\n                    <Sticker\r\n                        height={height}\r\n                        width={width} />\r\n                </$StickerContainer>\r\n                <img className=\"buttonGuard\" src={`./images/buttons/button-guard.png`} alt='button-guard' />\r\n                <img src={`./images/buttons/button_${buttonColor.toLowerCase()}.png`} alt='button sticker'\r\n                    style={{ width: '41px', height: '41px' }} />\r\n                <$TextContainer\r\n                    offsetX={textOffsetX}\r\n                    offsetY={textOffsetY}\r\n                    color={textColor.toLowerCase()}\r\n                    row={row}\r\n                    stickerText={text}\r\n                    width={config[`Row${row}`][`text${sideText}`].width}\r\n                    height={config[`Row${row}`][`text${sideText}`].height}>\r\n                    {row === 1 ? (\r\n                        <>\r\n                            <$IconContainer>\r\n                                <Icon height=\"15px\" width=\"15px\" color={textColor} />\r\n                            </$IconContainer>\r\n                            <div>\r\n                                {stickerTexts[text].text}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                {row === 2 ? (\r\n                                    <>\r\n                                        <div>\r\n                                            {stickerTexts[text].text}\r\n                                        </div>\r\n                                        <$IconContainer>\r\n                                            <Icon height=\"15px\" width=\"15px\" color={textColor} />\r\n                                        </$IconContainer>\r\n                                    </>\r\n                                ) : (\r\n                                        <div>\r\n                                            {stickerTexts[text].text}\r\n                                        </div>\r\n                                    )}\r\n                            </>\r\n                        )\r\n                    }\r\n                </$TextContainer>\r\n                {\r\n                    row !== 1 && row !== 2 &&\r\n                    <$IconContainer\r\n                        row={row}\r\n                        posAbsolute={row !== 1}\r\n                        dispInline={row === 2}\r\n                        style={{ left: config[`Row${row}`][`icon${sideText}`].x, top: config[`Row${row}`][`icon${sideText}`].y }}>\r\n                        <Icon height=\"15px\" width=\"15px\" color={textColor} />\r\n                    </$IconContainer>\r\n                }\r\n                <ButtonEditor\r\n                    active={active}\r\n                    buttonColor={buttonColor}\r\n                    stickerColor={stickerColor}\r\n                    textColor={textColor}\r\n                    text={text}\r\n                    setColor={setColor}\r\n                    setText={setText}\r\n                    index={index}\r\n                    side={side}\r\n                    copyButtonAll={copyButtonAll}\r\n                    copyButtonRow={copyButtonRow}\r\n                    row={row}\r\n                    setActive={setActive}\r\n                />\r\n            </$ButtonContainer >\r\n        );\r\n    }\r\n}\r\n\r\nexport default GSIButton;","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\rotary\\rotary.js",["117","118","119","120"],"import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { rotaryConfig, rotaryTexts } from '../config';\r\nimport * as Stickers from '../stickers';\r\nimport RotaryEditor from './rotary-editor';\r\n\r\nconst $StickerContainer = styled.div`\r\n    position: absolute;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    color: ${p => p.color};\r\n    svg .secondary {\r\n        color: ${p => p.textColor};\r\n    }\r\n`;\r\n\r\nconst $RotaryContainer = styled.div`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;\r\n    ${p => p.index === 0 && css`\r\n        img {\r\n            height: 42px;\r\n            width: 42px;\r\n        }\r\n    `}\r\n    svg, img {\r\n        position: absolute;\r\n    }\r\n\r\n    \r\n   svg {\r\n        overflow: visible;\r\n    }\r\n\r\n    &:hover {\r\n        svg .main {\r\n            stroke: white;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    }\r\n    \r\n    ${p => p.active && css`\r\n        ${$StickerContainer} > svg .main {\r\n            stroke: white !important;\r\n            stroke-width: 3px;\r\n            stroke-linejoin: round;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst $IconContainer = styled.div`\r\n`;\r\n\r\nconst $TextContainer = styled.div`\r\n    color: ${p => p.color};\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    font-size: 11px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    line-height: 11px;\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: ${p => p.funky ? '40px' : '48px'};\r\n    height: 15px;\r\n    left: ${p => p.x}px;\r\n    top: ${p => p.y}px;    \r\n    @font-face {\r\n        font-family: 'Adrianna';\r\n        src: local('Adrianna Extra bold'), local('Adrianna-Extra-bold'),\r\n            url('./Adrianna-Extrabold.woff2') format('woff2'),\r\n            url('./Adrianna-Extrabold.woff') format('woff'),\r\n            url('./Adrianna-Extrabold.ttf') format('truetype');\r\n        font-weight: 800;\r\n        font-style: normal;\r\n    }\r\n\r\n    font-family: 'Adrianna', Arial, serif;\r\n`;\r\n\r\nclass GSIRotary extends Component {\r\n\r\n    render() {\r\n        const {\r\n            index,\r\n            id,\r\n            rotaryColor,\r\n            stickerColor,\r\n            textColor,\r\n            text,\r\n            customText,\r\n            setText,\r\n            setCustomText,\r\n            clearCustomText,\r\n            active,\r\n            setActive,\r\n            setColor,\r\n            copyRotaryAll\r\n        } = this.props;\r\n        let RotarySticker = Stickers.RotaryRight;\r\n        let direction = rotaryConfig[index].dir;\r\n        if (direction === 'funky') {\r\n            RotarySticker = Stickers.Funky;\r\n        } else {\r\n            direction = direction.charAt(0).toUpperCase() + direction.slice(1);\r\n            RotarySticker = Stickers[`Rotary${direction}`];\r\n        }\r\n        let x = rotaryConfig[index].x;\r\n        let y = rotaryConfig[index].y;\r\n        let image = `./images/buttons/rotary_${rotaryColor.toLowerCase()}.png`;\r\n        if (index === 0) {\r\n            image = `./images/buttons/funky_${rotaryColor.toLowerCase()}.png`;\r\n        }\r\n        let side = 'right';\r\n        if (index === 0 || index === 1 || index === 2 || index === 4) {\r\n            side = 'left';\r\n        }\r\n        return (\r\n            <$RotaryContainer\r\n                x={x}\r\n                y={y}\r\n                index={index}\r\n                color={textColor}\r\n                active={active}\r\n                onClick={(e) => {\r\n                    !active ? setActive(id) : setActive(-1);\r\n                    e.stopPropagation();\r\n                }}\r\n\r\n                title=\"Click to customize rotary\">\r\n                <$StickerContainer\r\n                    x={rotaryConfig[index].sticker.x}\r\n                    y={rotaryConfig[index].sticker.y}\r\n                    color={stickerColor}\r\n                    textColor={textColor}\r\n                >\r\n                    <RotarySticker\r\n                        width={rotaryConfig[index].sticker.width}\r\n                        height={rotaryConfig[index].sticker.height}\r\n                    />\r\n                </$StickerContainer>\r\n                <img src={image} alt='rotary dial' style={{ height: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\", width: direction.toLowerCase() === 'funky' ? \"42px\" : \"73px\" }} />\r\n                {index !== 2 && (\r\n                    <$TextContainer\r\n                        x={rotaryConfig[index].text.x}\r\n                        y={rotaryConfig[index].text.y}\r\n                        color={textColor}\r\n                        funky={index === 0}>\r\n                        {customText ? customText : rotaryTexts[text].text}\r\n                    </$TextContainer>\r\n                )}\r\n                <RotaryEditor\r\n                    active={active}\r\n                    id={id}\r\n                    rotaryColor={rotaryColor}\r\n                    stickerColor={stickerColor}\r\n                    textColor={textColor}\r\n                    text={text}\r\n                    setColor={setColor}\r\n                    setText={setText}\r\n                    setCustomText={setCustomText}\r\n                    clearCustomText={clearCustomText}\r\n                    index={index}\r\n                    side={side}\r\n                    top={index === 1 || index === 3}\r\n                    copyRotaryAll={copyRotaryAll}\r\n                    setActive={setActive} />\r\n            </$RotaryContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GSIRotary;\r\n","C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\icons.js",[],"C:\\Users\\carbo\\Downloads\\GomezStuff\\site\\gsi-wheel-configurator\\src\\stickers.js",[],{"ruleId":"121","severity":1,"message":"122","line":4,"column":5,"nodeType":"123","messageId":"124","endLine":4,"endColumn":23},{"ruleId":"121","severity":1,"message":"125","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":172,"column":13,"nodeType":"128","endLine":176,"endColumn":27},{"ruleId":"126","severity":1,"message":"129","line":177,"column":17,"nodeType":"128","endLine":177,"endColumn":60},{"ruleId":"126","severity":1,"message":"130","line":178,"column":17,"nodeType":"128","endLine":178,"endColumn":34},{"ruleId":"126","severity":1,"message":"131","line":193,"column":25,"nodeType":"128","endLine":193,"endColumn":40},{"ruleId":"126","severity":1,"message":"132","line":194,"column":29,"nodeType":"128","endLine":194,"endColumn":145},{"ruleId":"126","severity":1,"message":"133","line":195,"column":29,"nodeType":"128","endLine":195,"endColumn":40},{"ruleId":"126","severity":1,"message":"134","line":196,"column":29,"nodeType":"128","endLine":198,"endColumn":51},{"ruleId":"126","severity":1,"message":"129","line":208,"column":33,"nodeType":"128","endLine":208,"endColumn":111},{"ruleId":"126","severity":1,"message":"131","line":221,"column":25,"nodeType":"128","endLine":221,"endColumn":40},{"ruleId":"126","severity":1,"message":"132","line":222,"column":29,"nodeType":"128","endLine":222,"endColumn":151},{"ruleId":"126","severity":1,"message":"133","line":223,"column":29,"nodeType":"128","endLine":223,"endColumn":40},{"ruleId":"126","severity":1,"message":"134","line":229,"column":29,"nodeType":"128","endLine":231,"endColumn":51},{"ruleId":"126","severity":1,"message":"129","line":241,"column":33,"nodeType":"128","endLine":241,"endColumn":111},{"ruleId":"126","severity":1,"message":"131","line":247,"column":25,"nodeType":"128","endLine":247,"endColumn":40},{"ruleId":"126","severity":1,"message":"130","line":257,"column":17,"nodeType":"128","endLine":257,"endColumn":34},{"ruleId":"121","severity":1,"message":"135","line":38,"column":7,"nodeType":"123","messageId":"124","endLine":38,"endColumn":25},{"ruleId":"121","severity":1,"message":"136","line":101,"column":13,"nodeType":"123","messageId":"124","endLine":101,"endColumn":15},{"ruleId":"126","severity":1,"message":"127","line":104,"column":13,"nodeType":"128","endLine":108,"endColumn":54},{"ruleId":"126","severity":1,"message":"129","line":109,"column":17,"nodeType":"128","endLine":109,"endColumn":60},{"ruleId":"126","severity":1,"message":"130","line":110,"column":17,"nodeType":"128","endLine":110,"endColumn":34},{"ruleId":"126","severity":1,"message":"131","line":123,"column":25,"nodeType":"128","endLine":123,"endColumn":40},{"ruleId":"126","severity":1,"message":"132","line":124,"column":29,"nodeType":"128","endLine":124,"endColumn":145},{"ruleId":"126","severity":1,"message":"133","line":125,"column":29,"nodeType":"128","endLine":125,"endColumn":40},{"ruleId":"126","severity":1,"message":"134","line":126,"column":29,"nodeType":"128","endLine":128,"endColumn":51},{"ruleId":"126","severity":1,"message":"129","line":138,"column":33,"nodeType":"128","endLine":138,"endColumn":111},{"ruleId":"126","severity":1,"message":"131","line":150,"column":25,"nodeType":"128","endLine":150,"endColumn":40},{"ruleId":"126","severity":1,"message":"132","line":151,"column":29,"nodeType":"128","endLine":151,"endColumn":151},{"ruleId":"126","severity":1,"message":"133","line":152,"column":29,"nodeType":"128","endLine":152,"endColumn":40},{"ruleId":"126","severity":1,"message":"134","line":158,"column":29,"nodeType":"128","endLine":160,"endColumn":51},{"ruleId":"126","severity":1,"message":"129","line":168,"column":33,"nodeType":"128","endLine":168,"endColumn":111},{"ruleId":"126","severity":1,"message":"130","line":179,"column":17,"nodeType":"128","endLine":179,"endColumn":34},{"ruleId":"121","severity":1,"message":"137","line":10,"column":8,"nodeType":"123","messageId":"124","endLine":10,"endColumn":16},{"ruleId":"121","severity":1,"message":"138","line":11,"column":8,"nodeType":"123","messageId":"124","endLine":11,"endColumn":22},{"ruleId":"121","severity":1,"message":"139","line":12,"column":8,"nodeType":"123","messageId":"124","endLine":12,"endColumn":19},{"ruleId":"121","severity":1,"message":"140","line":151,"column":7,"nodeType":"123","messageId":"124","endLine":151,"endColumn":22},{"ruleId":"121","severity":1,"message":"141","line":158,"column":7,"nodeType":"123","messageId":"124","endLine":158,"endColumn":17},{"ruleId":"121","severity":1,"message":"142","line":375,"column":11,"nodeType":"123","messageId":"124","endLine":375,"endColumn":21},{"ruleId":"126","severity":1,"message":"143","line":377,"column":7,"nodeType":"128","endLine":377,"endColumn":19},{"ruleId":"126","severity":1,"message":"144","line":378,"column":9,"nodeType":"128","endLine":378,"endColumn":27},{"ruleId":"126","severity":1,"message":"145","line":379,"column":11,"nodeType":"128","endLine":379,"endColumn":102},{"ruleId":"146","severity":1,"message":"147","line":389,"column":15,"nodeType":"148","endLine":389,"endColumn":43},{"ruleId":"126","severity":1,"message":"149","line":393,"column":13,"nodeType":"128","endLine":393,"endColumn":26},{"ruleId":"126","severity":1,"message":"150","line":403,"column":17,"nodeType":"128","endLine":403,"endColumn":107},{"ruleId":"126","severity":1,"message":"151","line":404,"column":19,"nodeType":"128","endLine":404,"endColumn":38},{"ruleId":"126","severity":1,"message":"152","line":426,"column":21,"nodeType":"128","endLine":426,"endColumn":74},{"ruleId":"126","severity":1,"message":"153","line":455,"column":13,"nodeType":"128","endLine":455,"endColumn":27},{"ruleId":"126","severity":1,"message":"154","line":459,"column":11,"nodeType":"128","endLine":459,"endColumn":28},{"ruleId":"126","severity":1,"message":"155","line":463,"column":17,"nodeType":"128","endLine":475,"endColumn":34},{"ruleId":"126","severity":1,"message":"156","line":498,"column":15,"nodeType":"128","endLine":498,"endColumn":59},{"ruleId":"126","severity":1,"message":"157","line":85,"column":17,"nodeType":"128","endLine":85,"endColumn":86},{"ruleId":"126","severity":1,"message":"129","line":110,"column":21,"nodeType":"128","endLine":110,"endColumn":66},{"ruleId":"126","severity":1,"message":"158","line":111,"column":21,"nodeType":"128","endLine":111,"endColumn":54},{"ruleId":"126","severity":1,"message":"159","line":173,"column":13,"nodeType":"128","endLine":183,"endColumn":51},{"ruleId":"126","severity":1,"message":"160","line":184,"column":17,"nodeType":"128","endLine":187,"endColumn":33},{"ruleId":"126","severity":1,"message":"161","line":195,"column":17,"nodeType":"128","endLine":202,"endColumn":76},{"ruleId":"126","severity":1,"message":"162","line":205,"column":29,"nodeType":"128","endLine":205,"endColumn":45},{"ruleId":"126","severity":1,"message":"162","line":219,"column":41,"nodeType":"128","endLine":219,"endColumn":57},{"ruleId":"126","severity":1,"message":"162","line":234,"column":21,"nodeType":"128","endLine":238,"endColumn":131},{"ruleId":"121","severity":1,"message":"163","line":54,"column":7,"nodeType":"123","messageId":"124","endLine":54,"endColumn":21},{"ruleId":"126","severity":1,"message":"152","line":124,"column":13,"nodeType":"128","endLine":135,"endColumn":51},{"ruleId":"126","severity":1,"message":"160","line":136,"column":17,"nodeType":"128","endLine":141,"endColumn":18},{"ruleId":"126","severity":1,"message":"161","line":149,"column":21,"nodeType":"128","endLine":153,"endColumn":45},"no-unused-vars","'$ColorSwatchButton' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react/jsx-pascal-case","Imported JSX component $EditorContainer must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component $CloseButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GroupContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RowContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorSwatchButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $HexValue must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ColorPickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","'$ButtonSelectGroup' is assigned a value but never used.","'id' is assigned a value but never used.","'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.","'FormControl' is defined but never used.","'$GSISelectLabel' is assigned a value but never used.","'$GSISelect' is assigned a value but never used.","'presetKeys' is assigned a value but never used.","Imported JSX component $Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ScrollContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigContainer must be in PascalCase or SCREAMING_SNAKE_CASE","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Imported JSX component $ConfigLeft must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $AnimationContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ButtonsContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $RotaryContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ConfigRight must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $BottomControls must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $GSISwitch must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveButton must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $SaveContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ImagePreview must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $ButtonContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $StickerContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $TextContainer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component $IconContainer must be in PascalCase or SCREAMING_SNAKE_CASE","'$IconContainer' is assigned a value but never used."]